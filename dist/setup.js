"use strict";
exports.__esModule = true;
var setup = "#!/bin/bash\n\n# Node.js Version: 18.x\n# Script version: 0.0.1\n# Last edit: 2022/11/18\n# By: Alec Jones\n\nFORCE=$1\nCOMPLETION_FILE=\"wparrot_completed.txt\"\nCOMPLETION_VAR=\"export WORDPARROT_COMPLETED_SETUP=true\"\nSPAWN_INSTANCE_FOLDER=\"spawn-instance\"\nENV_FILE=\".env\"\nSPAWN_INSTANCE_REPO=\"https://DowJones753@bitbucket.org/DowJones753/wordparrot-spawn-instance.git\"\nWORDPARROT_ROOT = \"/opt/wordparrot\"\nSETUP_SCRIPT=\"setup.sh\"\n\necho 'Creating root wordparrot directory at /opt/wordparrot ...'\n\nmkdir $WORDPARROT_ROOT\n\ncd $WORDPARROT_ROOT\n\ngit clone $SPAWN_INSTANCE_REPO $SPAWN_INSTANCE_FOLDER\n\necho 'Root directory created. Cloning build scripts...'\n\ngit clone $SPAWN_INSTANCE_REPO $SPAWN_INSTANCE_FOLDER\n\nchmod +x ./$SPAWN_INSTANCE_FOLDER/$SETUP_SCRIPT && ./$SPAWN_INSTANCE_FOLDER/$SETUP_SCRIPT $FORCE\n\nif [ -e \"$COMPLETION_FILE\" ]; then\n    if [[ \"$FORCE\" == \"--force\" ]]; then\n        echo 'You have selected to force installation.'\n    else\n        echo 'Completion file detected. You must add the --force parameter in order to proceed. Exiting.'\n        exit 1\n    fi\nfi\n\nif [ -x \"$(command -v apt-get)\" ]; then # Ubuntu/Debian\n    echo 'Linux distro: Debian/Ubuntu detected.'\n    curl -fsSL https://deb.nodesource.com/setup_lts.xnode | sudo -E bash - &&    sudo apt-get install -y nodejs\n    sudo apt install -y docker.io docker-compose\nelse \n    echo \"Failed to install node.js: Supported Linux package manager not found\"\n    echo \"Exiting.\"\n    exit 1\nfi\n\necho 'Node 18 installation complete.'\n\necho 'Generating env files...'\n\ncd ./$SPAWN_INSTANCE_FOLDER && npm run generate-env && cd ..\nmv ./$SPAWN_INSTANCE_FOLDER/scripts/.env ./\nmv ./$SPAWN_INSTANCE_FOLDER/scripts/.env.sandbox ./\nmv ./$SPAWN_INSTANCE_FOLDER/scripts/docker-compose.yml ./\nmv ./$SPAWN_INSTANCE_FOLDER/package.json ./\n\n# Set start script permissions\nchmod +x ./start.sh\n\necho 'Env files generated. Deleting spawn instance repo.'\n\n# Add domain name to .env file, so it will be added to domains.txt, a file containing authorized domains.\n# The server will add these domains to redis at bootup.\n# When added to redis, nginx can recognize the domain name as a permitted URL and generates an SSL cert if one is not found.\n# The specific domain will be injected at runtime because each domain is user-specific.\necho \"# Authorized Domain\" >> ./.env\n###INJECT_AUTHORIZED_DOMAIN###\n\n# Inject credentials for database\necho \"# Database Credentials\" >> ./.env\n###INJECT_MYSQL_ROOT_PASSWORD###\n###INJECT_DATABASE_USER###\n###INJECT_DATABASE_PASSWORD###\n\nrm -rf ./$SPAWN_INSTANCE_FOLDER\n\n# Download required containers as specified on docker-compose.yml\ndocker-compose pull\n\n# Docker images pulled from Docker Hub.\necho \"Images obtained from Docker Hub.\"\n\n# Write completion file. Must run script with --force flag if this file is detected later, otherwise script will end prematurely.\ntouch ./$COMPLETION_FILE\necho \"# This file is created once wordparrot installation successfully completes.\" >> ./$COMPLETION_FILE\necho \"# You don't need to put anything here.\" >> ./$COMPLETION_FILE\n\n# Also set WORDPARROT_SETUP_COMPLETE=true to the $PATH\necho \" \" >> ~/.profile\necho \"# Mark Wordparrot installation complete here\" >> ~/.profile\necho \"$COMPLETION_VAR\" >> ~/.profile\nsource ~/.profile\n\n# Docker images pulled from Docker Hub.\necho \"Now booting up application. Please wait a few minutes for dependencies to install.\"\n\n# Run start script from package.json\n./start.sh\n";
exports["default"] = setup;
